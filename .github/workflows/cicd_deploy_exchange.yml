# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: DEVELOP - PR Deploy

on:
  push:
    branches: [ "develop" ]


jobs:
   cd-deploy-develop:

    runs-on: ubuntu-latest
    environment: DEV
    env:
      ID_MULESOFT_OPS_USERNAME: ${{ vars.ID_MULESOFT_OPS_USERNAME }}
      ID_MULESOFT_OPS_PASSWORD: ${{ secrets.ID_MULESOFT_OPS_PASSWORD }}
    steps:
    - uses: actions/checkout@v4

    - name: Show Details
      run: echo branch ${GITHUB_BASE_REF}

    - name: Set environment type and branch variable
      shell: bash
      run: |
            echo "TARGET_ARTIFACT_ENV_NAME=dev" >> $GITHUB_ENV
            echo "ENV_TYPE=DEV" >> $GITHUB_ENV
          
      
    - name: Get Pull Request Number Associated with commit
      uses: actions/github-script@v7
      id: get_pr_data
      with:
          script: |
              return (
                await github.rest.repos.listPullRequestsAssociatedWithCommit({
                  commit_sha: context.sha,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                })
              ).data[0];

    - name: Pull Request data
      run: |
       echo "${{ fromJson(steps.get_pr_data.outputs.result).number }}"

    - name: Set variables in pom.xml
      shell: bash
      run: |
          ARTIFACTID=$(grep -m1 -o '<artifactId>.*</artifactId>' pom.xml | sed 's/<artifactId>//g' | sed 's/<\/artifactId>//g')
          sed -i 's/'${ARTIFACTID}'/'${ARTIFACTID}'-'${TARGET_ARTIFACT_ENV_NAME}'/g' pom.xml

          VERSION=$(grep -m1 -o '<version>.*</version>' pom.xml | sed 's/<version>//g' | sed 's/<\/version>//g')
          sed -i 's/<version>'${VERSION}'<\/version>/<version>'${VERSION}'-PR${{ fromJson(steps.get_pr_data.outputs.result).number }}<\/version>/g' pom.xml
          echo $VERSION
          VERSION=$(grep -m1 -o '<version>.*</version>' pom.xml | sed 's/<version>//g' | sed 's/<\/version>//g')
          echo "ASSET_VERSION=$VERSION" >> $GITHUB_ENV
          echo $VERSION
          NAME=$(grep -m1 -o '<artifactId>.*</artifactId>' pom.xml | sed 's/<artifactId>//g' | sed 's/<\/artifactId>//g')
          echo @NAME
          echo "ASSET_NAME=$NAME" >> $GITHUB_ENV
          echo "DEPLOYMENT_APP_NAME=$NAME" >> $GITHUB_ENV
          
    
    - name: Show pom.xml contents
      shell: bash
      run: |
          echo "$(cat pom.xml)"

    - name: Build with Maven
      shell: bash
      run: |
          mvn -B package --file pom.xml \
          -s settings.xml \
          -Dsap.lib.type=dll \
          -Dmule.env=local  -Ddatacenter=sec \
          -Dmaven.wagon.http.ssl.insecure=true \
          -Dmaven.wagon.http.ssl.allowall=true \
          -Dmaven.wagon.http.ssl.ignore.validity.dates=true \
          -Dcom.sun.net.ssl.checkRevocation=false \
          -DskipTests
          
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
          name: artifacts
          path: target/*.jar

    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
          name: artifacts

    - name: Deploy to Exchange
      shell: bash
      run: |
        artifactName=$(ls *.jar | head -1)
        mvn -B deploy --file pom.xml \
            -s settings.xml \
            -Dsap.lib.type=dll \
            -Dmule.env=local  -Ddatacenter=sec \
            -Dmaven.wagon.http.ssl.insecure=true \
            -Dmaven.wagon.http.ssl.allowall=true \
            -Dmaven.wagon.http.ssl.ignore.validity.dates=true \
            -Dcom.sun.net.ssl.checkRevocation=false \
            -DskipTests          
